#!/usr/bin/env python3
"""iqm.py

Generate IQM project files and run on model.

Example dir structure:

    benchmarks/matlab/iqm/simple/:
    project  simple.m

    benchmarks/matlab/iqm/simple/project:
    experiments  models

    benchmarks/matlab/iqm/simple/project/experiments:
    t_0_T_points_10  t_0_T_points_20

    benchmarks/matlab/iqm/simple/project/experiments/t_0_T_points_10:
    experiment.csv  experiment.exp

    benchmarks/matlab/iqm/simple/project/experiments/t_0_T_points_20:
    experiment.csv  experiment.exp

    benchmarks/matlab/iqm/simple/project/models:
    models.txt
"""
import os
import chevron

matlab_file_template = """\
clc; clear all; close all
run ../../src/'IQMtools V1.2.2.2'/IQMlite/installIQMlite.m;
run ../../src/'IQMtools V1.2.2.2'/IQMpro/installIQMpro.m;
run ../../src/'IQMtools V1.2.2.2'/installIQMtools.m;
proj = IQMprojectSB('{{project_dirname}}');
IQMinfo(proj);
proj_opt = proj;
IQMcomparemeasurements(proj);
paramdata = {
{{#global_parameters}}
   '{{name}}' {{min_value}} {{max_value}}
{{/global_parameters}}
};
paramdatalocal = {
};
icdata = {
{{#initial_conditions}}
   '{{name}}' {{min_value}} {{max_value}}
{{/initial_conditions}}
};
estimation = [];
estimation.modelindex = 1;
estimation.experiments.indices = [1];
estimation.experiments.weight = [1];
estimation.optimization.method = 'simplexIQM';
estimation.optimization.options.maxfunevals = 2000;
estimation.integrator.options.abstol = 1e-12;
estimation.integrator.options.reltol = 1e-12;
estimation.integrator.options.minstep = 0;
estimation.integrator.options.maxstep = Inf;
estimation.integrator.options.maxnumsteps = 5000;
estimation.displayFlag = 2;
estimation.scalingFlag = 2;
estimation.timescalingFlag = 0;
estimation.initialconditionsFlag = 1;
estimation.parameters = paramdata;
estimation.parameterslocal = paramdatalocal;
estimation.initialconditions = icdata;
output = IQMparameterestimation(proj_opt, estimation)
proj_opt = output.projectopt;
IQMcomparemeasurements(proj_opt, estimation.modelindex);
display(proj_opt);
"""

csv_wrapper_template = """\
[Name]
{{model_name}}

[Notes]
This model is generated by a script.

[Components]
{{header_row}}

[Componentnotes]
This model is generated by a script.


[Values]
{{raw_csv_files}}
"""

exp_file_template = """\
********** EXPERIMENT NAME


********** EXPERIMENT NOTES


********** EXPERIMENT INITIAL PARAMETER AND STATE SETTINGS
a = 0.5
b = 0.5

x1(0) = 0.1
x2(0) = 0.1

********** EXPERIMENT PARAMETER CHANGES

********** EXPERIMENT STATE CHANGES
"""


model_file_tempalte = """\
********** MODEL NAME

model

********** MODEL NOTES

osc.

********** MODEL STATES
d/dt(x1) = -a * x2
d/dt(x2) = 1 / b * (x1)

********** MODEL PARAMETERS
a = 0.2
b = 0.2

********** MODEL VARIABLES

OUTPUT1 = x1
OUTPUT2 = x2

********** MODEL REACTIONS


********** MODEL FUNCTIONS


********** MODEL EVENTS
"""

def make_iqm_files():
    # create directory structure
    model_name = "simple"
    project_dirname = "blah"
    model_size = 20
    os.mkdir(f"{project_dirname}")
    matlab_filename = f"{project_dirname}/{model_name}.m"
    os.mkdir(f"{project_dirname}/experiments/")
    os.mkdir(f"{project_dirname}/models/")
    model_path = f"{project_dirname}/experiments/{model_name}_{model_size}"
    os.mkdir(model_path)
    with open(matlab_filename, "w") as matlab_file:
        matlab_file_template_variables = {
            "project_dirname": project_dirname,
            "global_parameters": [
                {"name": "a", "min_value": 0.0, "max_value": 1.5},
                {"name": "b", "min_value": 0.0, "max_value": 1.5},
            ],
            "initial_conditions": [
                {"name": "x1", "min_value": 0.0, "max_value": 1.5},
                {"name": "x2", "min_value": 0.0, "max_value": 1.5},
            ],
        }
        print(chevron.render(matlab_file_template, matlab_file_template_variables))
    with open(f'{model_path}/experiment.csv', 'w') as csv_file:
        csv_lines = open('data/simple.csv').readlines()
        csv_wrapper_template_variables = {
                "header_row": csv_lines[0].rstrip(),
                "raw_csv_files": "".join(csv_lines[1:]),
        }
        print(chevron.render(csv_wrapper_template, csv_wrapper_template_variables), file=csv_file)
    exp_file_template_variables = {}
#    print("EXP FILE")
#    print(chevron.render(exp_file_template, exp_file_template_variables))
#    print()
    os.system(f'ls {project_dirname} -R')
    os.unlink(project_dirname)
    

make_iqm_files()
